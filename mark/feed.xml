<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description></description>
    <link>http://www.dosrc.com/mark/</link>
    <atom:link href="http://www.dosrc.com/mark/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Mar 2016 03:33:38 +0000</pubDate>
    <lastBuildDate>Tue, 22 Mar 2016 03:33:38 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>How Does Git Work</title>
        <description>&lt;h3&gt;Git 思想&lt;/h3&gt;

&lt;p&gt;git 旨在创建一个分布式版本控制工具，满足以下一些需求：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我只想&lt;strong&gt;单机&lt;/strong&gt;的工作着，备份我的工作的每次修改，那么你只需要用到git的本地仓库，把你工作的内容保存（即commit）到你的仓库中去。&lt;/li&gt;
&lt;li&gt;我们有一个&lt;strong&gt;团队&lt;/strong&gt;，共同做着一些事情（开发，写文章...），我想同步我们之间的工作，好让别人清楚知道你做了什么。这时候好的办法是创建一个远程仓库，用来保存整个团队的工作内容，每个工作者再复制（即clone）远程仓库的内容作为本地仓库（既然是复制，那么你的仓库理应也可以作为远程仓库使用，事实上确实如此，只需要改一个地方，后面会阐述），平常每个工作者在自己的仓库中工作着，时不时看看别人工作的内容，更新这些新的工作内容到自己的本地仓库中来，看看和自己的工作有没有冲突，这里涉及到冲突的解决，暂不阐述。当你工作完成后，可以把自己的工作提交到远程仓库中去，这样别人就可以通过远程仓库看到你的工作内容了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;创建Git Repository&lt;/h3&gt;

&lt;p&gt;如果你用的是TortoiseGit创建（git create repository here...)一个新的创库的话，那么会弹框提示你是否Make it bare,分别对应git命令&lt;code&gt;git init&lt;/code&gt; 和 &lt;code&gt;git init --bare&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你仔细对比这两个命令创建的repository的话就会发现它们仅有congit/下的bare属性不同，一个是false，一个是true，如果还要说有什么不同，那就是没有bare属性的repository的目录被.git文件夹包裹了。&lt;/p&gt;

&lt;p&gt;虽然仅有一个属性不同，但是这两个repository的作用却是不同，一个是本地工作repository，一个是专供远程提交的repository。对于本地工作repository，别人是不能推送（push）工作到你的repository的。所以congit/下的bare属性如果为true的话则这个repository可以充当远程repository，你只要把你的clone过来的repository或git init初始化的repository中的.git/config下的bare属性改为true就可以变成远程repository了，甚至都不需要把.git下的文件移出来到父目录下。远程repository今后的工作中并不会产生logs（用来记录运行记录）文件夹。&lt;/p&gt;

&lt;h3&gt;Git 工作运行的目录结构&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;hooks                                   │hooks
    - applypatch-msg.sample             │    - applypatch-msg.sample
    - commit-msg.sample                 │    - commit-msg.sample
    - post-update.sample                │    - post-update.sample
    - pre-applypatch.sample             │    - pre-applypatch.sample
    - pre-commit.sample                 │    - pre-commit.sample
    - prepare-commit-msg.sample         │    - prepare-commit-msg.sample
    - pre-push.sample                   │    - pre-push.sample
    - pre-rebase.sample                 │    - pre-rebase.sample
    - update.sample                     │    - update.sample
info                                    │info
    - exclude                           │    - exclude
                                        │logs
                                        │    - refs
                                        │        - heads
                                        │            - master
                                        │    - HEAD
                                        │
objects                                 │objects
                                        │    - 80
                                        │        - 865964295ae2f11d27383e5f9c0b58a8ef21da
                                        │    - b0
                                        │        - 42d75a51e77fdac111e85eda5331470781b9de
                                        │    - d6
                                        │        - 70460b4b4aece5915caf5c68d12f560a9fe3e4
    - info                              │    - info
    - pack                              │    - pack
refs                                    │refs
    - heads                             │    - heads
                                        │        - master
    - tags                              │    - tags
                                        │COMMIT_EDITMSG
config                                  │config
description                             │description
HEAD                                    │HEAD
                                        │index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;左上边是新建的一个仓库的目录结构，未提交任何东西，右上边是提交了一次文件后的仓库目录结构。把它们放在一起方便对比新增了哪些文件。&lt;/p&gt;

&lt;p&gt;这些目录就是你的整个仓库的结构了，你可以把他们复制到任何地方用来备份你的仓库。&lt;/p&gt;

&lt;p&gt;下面阐述每个目录、文件的作用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hooks 目录下放置了许多脚本，也称钩子，这些脚本就像一些回调函数，会在你使用git的各个阶段被调用。从名字中可以看出大致被调用的阶段，你也可以自定义一些脚本用来实现诸如提交时发邮件，单元测试等需求。关于自定义钩子参见&lt;a href=&quot;https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E6%8C%82%E9%92%A9&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;info/exclude 文件用来忽略一些不想提交的文件，避免被git检测到，和.gitignore文件的作用类似，但是这个exclude文件不能被push到远程仓库中去，所以exclude中的规则不能被其他人共享。关于exclude的更多用法暂时还没了解到。&lt;/li&gt;
&lt;li&gt;logs 记录git的运行记录，这里的文件信息仅供查看，并不会当作分支历史记录的依据，分支历史纪录的依据以树的形式存储在objects中。logs只需记录SHA-1值的变化，因为每次git提交操作都会在objects目录下生成与SHA-1值对应的文件，这些文件记录了具体变化。logs只需记录从哪个文件变到了哪个文件即可。子目录refs中的以分支命名的文件（包括本地分支和远程分支）记录每次提交的变化。HEAD则记录所有的操作（包括切换分支，rebase等，但是创建分支这里没有记录，很是奇怪）。refs/heads/master 记录主分支从创建开始的每次SHA-1更新变化，如果还有其它分支，这里也会有一个以其它分支命名的文件，记录分支从何处SHA-1值开始创建即其后的每次SHA-1更新变化。远程分支的push信息会记录在refs/heads/remotes目录下。&lt;/li&gt;
&lt;li&gt;objects 相当于一个小型的文件数据库，你所有提交的东西（包括创建tag的注释信息，和注释的修改，总之就是需要记录的信息）都会存储在这里。看到这里你会恍然大悟，所有的SHA-1值在这里都有对应，形式为前2位十六进制数命名的文件夹加上后面38位十六进制数命名的文件，不直接使用文件的大概原因是为了方便检索，当提交次数多了以后，SHA-1值势必大大增加，文件夹树的形式提高了检索速度。文件中包含的内容后面阐述，大概相当于按SHA-1值获取提交内容的文件系统。&lt;/li&gt;
&lt;li&gt;refs 相对于文件指针，指向某次提交的SHA-1值。包含每个分支的头和你建立的tags&lt;/li&gt;
&lt;li&gt;COMMIT_EDITMSG 用来记录最后一次提交的注释。&lt;/li&gt;
&lt;li&gt;config git的配置文件。&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;HEAD 指向当前的分支头指针，相当于C语言中指针的指针。&lt;/li&gt;
&lt;li&gt;index 缓存更改的文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;阐述目录结构后，你会发现git的工作原理其实非常简单，就是生成一个文件记录你的每次git操作，计算出该文件的SHA-1值，以SHA-1值唯一标识这个文件，再弄一些指针来指向这些SHA-1来充当分支头或者tag标记，最后再弄个log来记录你想要的每次变化路径，这些路径就是你的分支变化史了。&lt;/p&gt;

&lt;h4&gt;Git 记录文件探索&lt;/h4&gt;

&lt;p&gt;前面已经说了，git的所有操作记录都会保存在objects目录下的文件中，那么这些文件中到底都存储了些什么内容呢，直接以文本方式打开这些文件都是乱码，后来发现这些文件要使用&lt;code&gt;git cat-file -p (SHA-1)&lt;/code&gt;命令来查看，其中可以不写完整（实测至少4位），只要能唯一标识文件即可。针对上述的第一次提交我们分别查看objects下增加的三个文件夹下的三个文件，SHA-1值是等于文件夹名加上文件名,在objects目录下（只要git目录下都可以）打开bash或命令提示窗口&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da
100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4    test.txt

$ git cat-file -p b042d75a51e77fdac111e85eda5331470781b9de
tree 80865964295ae2f11d27383e5f9c0b58a8ef21da
author vandykai &amp;lt;wdkrgst@gmail.com&amp;gt; 1458547402 +0800
committer vandykai &amp;lt;wdkrgst@gmail.com&amp;gt; 1458547402 +0800

test comment

$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一次提交的是test.txt文件，该文本文件中的内容是test content，提交时的comment是test comment&lt;/p&gt;

&lt;p&gt;在text.txtw文件中换行添加内容added text再次提交，提交comment为added comment，提交后又新增了三个文件夹和三个文件，分别使用&lt;code&gt;git cat-file -p (SHA-1)&lt;/code&gt;命令来查看这三个文件的内容结果如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git cat-file -p 2ce18c9a25e15f30d684274b89d0ef29d032491e
tree 5a1e99b76770966d5975d2ba8aadf32c2bf550ea
parent b042d75a51e77fdac111e85eda5331470781b9de
author vandykai &amp;lt;wdkrgst@gmail.com&amp;gt; 1458567378 +0800
committer vandykai &amp;lt;wdkrgst@gmail.com&amp;gt; 1458567378 +0800

added comment

$ git cat-file -p 3a35a3b22ba503b003bbdf6066163a14d75b9a41
test content
added text

$ git cat-file -p 5a1e99b76770966d5975d2ba8aadf32c2bf550ea
100644 blob 3a35a3b22ba503b003bbdf6066163a14d75b9a41    test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到SHA-1值为2ce18c9a25e15f30d684274b89d0ef29d032491e的文件信息中有一个tree值和parent值，parent值就是上次提交的SHA-1值，链接起来就形成了单个分支的列表，多个分支形成了一棵git数。通过tree的值指向的文件里里面的记录可以找到更新的文件被存储在哪个文件里面，现在的tree值为5a1e99b76770966d5975d2ba8aadf32c2bf550ea，查看这个文件，发现更新的文件被存储在了3a35a3b22ba503b003bbdf6066163a14d75b9a41这个文件里面，提交的文件名是test.txt，100644是文件模式，查看3a35a3b22ba503b003bbdf6066163a14d75b9a41这个文件发现它存储了最新文件的内容，没有采取差异存储，与预计有点出路，后面私下再次实验了一把，更新（增加数行）了一个5MB多的文本文件，发现每次更新提交都会增加3MB多的文件，看来确实没有采用差异存储，只是压缩了文件，这一点还是很奇怪的。后来查了下&lt;a href=&quot;http://www.open-open.com/lib/view/open1328070620202.html&quot;&gt;资料&lt;/a&gt;发现要手工调用&lt;code&gt;git gc&lt;/code&gt;命令来实现这种目的，当objects中的对象过多时，也会自动调用这个过程。这部分和index文件的作用留待以后研究。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Mar 2016 12:30:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/vcs/2016/03/20/git-how-does-git-work.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/vcs/2016/03/20/git-how-does-git-work.html</guid>
        
        <category>vcs</category>
        
        <category>git</category>
        
        
        <category>vcs</category>
        
      </item>
    
      <item>
        <title>Linux Kernel-System Call</title>
        <description>&lt;h2&gt;重点知识总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intel X86 CPU 有四种不同的执行级别0-3，Linux只使用了其中的0级和3级，分别来表示内核态和用户态。&lt;/li&gt;
&lt;li&gt;一般来说在32位X86机器上，Linux系统中，地址空间是一个显著的标志：0XC0000000以上的地址空间只能在内核态下访问，0X00000000-0XBFFFFFFF的地址空间在两种状态下都可以访问，这里所说的是逻辑地址而不是物理地址。所以寄存器的最低两位表明了当前代码所需的特权级。11代表需要内核态级别，否则只需要用户态级别。&lt;/li&gt;
&lt;li&gt;中断处理是从用户态进入内核态主要的方式。系统调用是一种特殊的中断。&lt;/li&gt;
&lt;li&gt;从用户态切换到内核态时，必须保存用户态的寄存器上下文。&lt;/li&gt;
&lt;li&gt;中断/int指令会在堆栈上保存一些寄存器的值，如用户态栈顶指针，当时的状态字，当时的cs:eip的值，并恢复内核态的对应寄存器的值。&lt;/li&gt;
&lt;li&gt;中断发生后第一件事就是保存现场到自己（内核态)的堆栈中,这就正好衔接了之前保存和恢复栈顶指针的动作，保护现场就是进入中断程序保存需要用到的寄存器的数据，也可以简单保存其他所有寄存器的值即定义一个SAVE_ALL的代码块供调用。恢复现场同理。&lt;/li&gt;
&lt;li&gt;iret指令与中断信号（包括int指令）发生时CPU做的动作正好相反&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中断一般模版&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;;进入中断
int指令进入到中断/系统调用
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;;中断处理程序一般步骤
SAVE_ALL调用
中断处理程序
RESTORE_ALL调用
iret指令
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Libc库定义的一些API引用了封装例程（wrapper routine，唯一的目的就是发布系统调用），一般每个系统调用对应一个封装例程，库再用这些封装例程定义出给用户的API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统调用的三层皮xyz、system&lt;em&gt;call和sys&lt;/em&gt;xyz,库函数中一般有trap指令或int指令，类似于一个系统中断，而系统调用是一个特殊的中断处理函数（inerrupt handler）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Linux中是通过执行&lt;code&gt;int $0x80&lt;/code&gt;来执行系统调用的，这条汇编指令产生向量为128的编程异常，使用eax来传递系统调用号。Intel Pentium II中引入了sysenter指令（快速系统调用）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器传递参数具有如下限制：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个参数的长度不能超过寄存器的长度，即32位&lt;/li&gt;
&lt;li&gt;系统调用传递第一个参数用ebx，系统调用的返回值使用eax存储，和普通函数一样，在系统调用号（eax）之外，参数的个数不能超过6个（ebx，ecx，edx，esi，edi，ebp），超过6个可通过传递指向一块内存区域的指针的方法减少参数传递。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;实验分析&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;实验目的：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;实验选取某个系统调用，编码实现两种调用方法——C语言库函数调用和汇编中断达，并到相同的效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实验步骤：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;系统调用列表&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/syscalls/syscall_32.tbl&quot;&gt;&lt;strong&gt;链接&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;本次实验选取mkdir系统调用&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先查看mkdir的库函数用法&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;man -f mkdir&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-03-18-linux-kernel-system-call/man--f-mkdir.png&quot; alt=&quot;man--f-mkdir&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发现有两种文档，执行&lt;code&gt;man 1 mkdir&lt;/code&gt;查看第一种文档&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-03-18-linux-kernel-system-call/man-1-mkdir.png&quot; alt=&quot;man-1-mkdir&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发现是mkdir命令相关的文档，不是我们要的库函数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;man 2 mkdir&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-03-18-linux-kernel-system-call/man-2-mkdir.png&quot; alt=&quot;man-2-mkdir&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正是我们需要的文档，查看用法,开始编程。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;源代码如下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mkdir.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
int main() {
   int result =  mkdir(&amp;quot;test&amp;quot;, 0777);
   if (result == 0) {
       printf(&amp;quot;dirtory test make success&amp;quot;);
   } else {
       printf(&amp;quot;dirtory test make failture&amp;quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;mkdir-asm.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
int main() {
    int result = 0;
    const char *filePath = &amp;quot;test&amp;quot;;
    mode_t mode = 0777;
    asm volatile(
            &amp;quot;movl $0X27,%%eax\n\t&amp;quot;
            &amp;quot;movl %1,%%ebx\n\t&amp;quot;
            &amp;quot;movl %2,%%ecx\n\t&amp;quot;
            &amp;quot;int $0X80\n\t&amp;quot;
            &amp;quot;movl %%eax,%0\n\t&amp;quot;
            :&amp;quot;=m&amp;quot;(result)
            :&amp;quot;r&amp;quot;(filePath),&amp;quot;r&amp;quot;(mode)
            :&amp;quot;%eax&amp;quot;,&amp;quot;%ebx&amp;quot;,&amp;quot;%ecx&amp;quot;
            );
   if (result == 0) {
       printf(&amp;quot;dirtory test make success&amp;quot;);
   } else {
       printf(&amp;quot;dirtory test make failture&amp;quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mkdir.c 和 mkdir-asm.c 功能一致都是在当前目录下创建test文件夹，mkdir.c是通过调用库函数&lt;code&gt;int mkdir(const char *pathname,mode_t mode);&lt;/code&gt;创建test文件夹，而mkdir-asm.c是通过中断程序创建test文件夹。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;后记&lt;/h2&gt;

&lt;p&gt;在查找系统调用列表时发现了fork系统调用，fork系统调用是用来创建一个与本进程基本相同的子进程。&lt;/p&gt;

&lt;p&gt;分析下面的代码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fork-test.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
int main() {
    pid_t sonPid = 0;
    sonPid = fork();
    if (sonPid == 0) {
        printf(&amp;quot;process %d -&amp;gt; parent pid: %d\n&amp;quot;, getpid(), getppid());
        printf(&amp;quot;process %d -&amp;gt; before excute fork&amp;#39;s fork pid: %d\n&amp;quot;, getpid(), sonPid);
        sonPid = fork();
        if (sonPid == 0) {
            sleep(5);
            printf(&amp;quot;process %d -&amp;gt; parent pid: %d\n&amp;quot;, getpid(), getppid());
            printf(&amp;quot;process %d -&amp;gt; fork pid: %d\n&amp;quot;, getpid(), sonPid);
        } else {
            printf(&amp;quot;process %d -&amp;gt; after excute fork&amp;#39;s fork pid: %d\n&amp;quot;, getpid(), sonPid);
        }
    } else {
        printf(&amp;quot;process %d -&amp;gt; parent pid: %d\n&amp;quot;, getpid(), getppid());
        printf(&amp;quot;process %d -&amp;gt; fork pid: %d\n&amp;quot;, getpid(), sonPid);
        while(1);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-03-18-linux-kernel-system-call/fork-test-result.png&quot; alt=&quot;fork-test-result&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pid_t fork(void);&lt;/code&gt;库函数会创建一个与当前进程相同的子进程并返回子进程的pid，从这一行开始（包括），会有两个进程执行相同的后续代码，变量不共享，分别保持着自己的变量，子进程在&lt;code&gt;pid_t fork(void);&lt;/code&gt;这行代码的结果与父进程不同，返回的是0，表示没有自己的子进程。也就是说父进程和子进程在&lt;code&gt;pid_t fork(void);&lt;/code&gt;这行代码处都会有返回值，但返回值不同。&lt;code&gt;getpid()&lt;/code&gt;是用来返回当前进程的pid，&lt;code&gt;getppid()&lt;/code&gt;是用来返回父进程的pid。&lt;/p&gt;

&lt;p&gt;fork-test.c意在创建3个进程，即父进程A，子进程B，孙子进程C，让父进程A一直执行不结束，子进程B执行完结束，孙子进程C睡眠5秒，待子进程B执行完后打印出孙子进程C的父进程pid，当孙子进程C的父进程B没有结束时&lt;code&gt;getppid()&lt;/code&gt;返回的应当是孙子进程C的父进程B的pid，当父进程结束时，从运行结果可以看出，返回的是1号进程的pid，即1号进程变成了孙子进程C的父进程。所有的用户进程都是由1号进程派生出来的，所有的内核态进程都是由2号进程派生出来的。&lt;/p&gt;

&lt;p&gt;wdk 原创作品转载请注明出处&lt;br&gt;
相关链接 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot;&gt;《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2016 12:13:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/linux/2016/03/18/linux-kernel-system-call.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/linux/2016/03/18/linux-kernel-system-call.html</guid>
        
        <category>linux</category>
        
        <category>linux-kernel</category>
        
        <category>experiment</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Linux Kernel-Construct A Simple Linux Operating System</title>
        <description>&lt;h2&gt;重点知识总结&lt;/h2&gt;

&lt;h3&gt;Linux内核源码简介&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/&quot;&gt;内核源代码linux-3.18.6&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;各个文件夹模块的用途（部分）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;arch&lt;/strong&gt; -(archetecture)与具体cpu相关，其内的x86文件夹是目前重点关注的,若只是关注这一个文件夹，分析时可以把其它文件夹删除&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;crypto&lt;/strong&gt; - 与加密解密相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - 文档相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;drivers&lt;/strong&gt; - 驱动相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fs&lt;/strong&gt; - （file system）文件系统相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt; - 初始化相关，内核启动相关的代码基本在此文件夹下，其中的main.c/start_kernel函数是内核启动的起点，相当于C程序的main函数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ipc&lt;/strong&gt; - (Inter-Process Communication)进程间通信相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kernel&lt;/strong&gt; - linux内核的核心代码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lib&lt;/strong&gt; - 公用的库文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mm&lt;/strong&gt; - (memory management)内存管理相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;net&lt;/strong&gt; - 网络相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scripts&lt;/strong&gt; - 脚本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;security&lt;/strong&gt; - 安全相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sound&lt;/strong&gt; - 声音相关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tools&lt;/strong&gt; - 工具&lt;/p&gt;

&lt;h3&gt;使用gdb跟踪调试内核，其中的rootfs.img 为自制的根文件系统&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;qemu -kernel linux-3.18.6/arch/x86/boot/bzImage -initrd rootfs.img -s -S # 关于-s和-S选项的说明：
# -S freeze CPU at startup (use ’c’ to start execution)
# -s shorthand for -gdb tcp::1234 若不想使用1234端口，则可以使用-gdb tcp:xxxx来取代-s选项
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另开一个shell窗口&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gdb
（gdb）file linux-3.18.6/vmlinux # 在gdb界面中targe remote之前加载符号表
（gdb）target remote:1234 # 建立gdb和gdbserver之间的连接,按c 让qemu上的Linux继续运行
（gdb）break start_kernel # 断点的设置可以在target remote之前，也可以在之后
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;实验分析&lt;/h2&gt;

&lt;h3&gt;main.c的部分代码如下（省略号为略去的代码）&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;asmlinkage __visible void __init start_kernel(void)
{
    ...
    set_task_stack_end_magic(&amp;amp;init_task);
    ...
    trap_init();
    mm_init();
    ...
    sched_init();
    ...
    rest_init();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;rest_init 函数代码如下&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;static noinline void __init_refok rest_init(void)
{
    int pid;

    rcu_scheduler_starting();
    /*
     * We need to spawn init first so that it obtains pid 1, however
     * the init task will end up wanting to create kthreads, which, if
     * we schedule it before we create kthreadd, will OOPS.
     */
    kernel_thread(kernel_init, NULL, CLONE_FS);
    numa_default_policy();
    pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
    rcu_read_lock();
    kthreadd_task = find_task_by_pid_ns(pid, &amp;amp;init_pid_ns);
    rcu_read_unlock();
    complete(&amp;amp;kthreadd_done);

    /*
     * The boot idle thread must execute schedule()
     * at least once to get things moving:
     */
    init_idle_bootup_task(current);
    schedule_preempt_disabled();
    /* Call into cpu_idle with preempt disabled */
    cpu_startup_entry(CPUHP_ONLINE);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;代码分析&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start_kernel/set_task_stack_end_magic(&amp;amp;init_task); init_task&lt;/code&gt;即手工创建的PCB，即0号进程，即最终的idle进程&lt;/li&gt;
&lt;li&gt;不管分析内核的哪一部分都会涉及到&lt;code&gt;start_kernel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_kernel/trap_init&lt;/code&gt; 涉及到中断的初始化，其中的&lt;code&gt;set_system_trap_gate&lt;/code&gt;是设置系统调用的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_kernel/mm_init&lt;/code&gt; 内存管理模块的初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_kernel/sched_init&lt;/code&gt; 调度模块的初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rest_init/kernel_thread(kernel_init, NULL, CLONE_FS);&lt;/code&gt; 创建用户态1号进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rest_init/kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);&lt;/code&gt; 创建内核态2号进程&lt;/li&gt;
&lt;li&gt;之后若没有其他事情做，就进入cpu&lt;em&gt;startup&lt;/em&gt;entry(CPUHP_ONLINE);，此时0号进程就进入while(1)循环&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里面内核启动后通过&lt;code&gt;set_task_stack_end_magic(&amp;amp;init_task);&lt;/code&gt;初始化了0号进程，0号进程通过&lt;code&gt;kernel_thread(kernel_init, NULL, CLONE_FS);&lt;/code&gt;和&lt;code&gt;kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);&lt;/code&gt;分别创建了1号进程和2号进程，之后若无事做就进入&lt;code&gt;while(1)&lt;/code&gt;循环保持运行。&lt;/p&gt;

&lt;p&gt;wdk 原创作品转载请注明出处&lt;br&gt;
相关链接 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot;&gt;《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Mar 2016 12:13:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/linux/2016/03/17/linux-kernel-construct-a-simple-linux-operating-system.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/linux/2016/03/17/linux-kernel-construct-a-simple-linux-operating-system.html</guid>
        
        <category>linux</category>
        
        <category>linux-kernel</category>
        
        <category>experiment</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Linux Kernel-Working Process Of Operating System</title>
        <description>&lt;h2&gt;重点知识总结&lt;/h2&gt;

&lt;h3&gt;C语言内嵌汇编语法&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/mark/gramar/2016/03/06/c-inline-assembly-language.html&quot;&gt;C Inline Assembly Language&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;实验分析&lt;/h2&gt;

&lt;h3&gt;自定义进程定义的代码如下&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#define MAX_TASK_NUM        4
#define KERNEL_STACK_SIZE   1024*8

/* CPU-specific state of this task */
struct Thread {
    unsigned long        ip;
    unsigned long        sp;
};

typedef struct PCB{
    int pid;
    volatile long state;    /* -1 unrunnable, 0 runnable, &amp;gt;0 stopped */
    char stack[KERNEL_STACK_SIZE];
    /* CPU-specific state of this task */
    struct Thread thread;
    unsigned long    task_entry;
    struct PCB *next;
}tPCB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;自定义进程切换的核心代码如下&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if(next-&amp;gt;state == 0) {
    /* -1 unrunnable, 0 runnable, &amp;gt;0 stopped */
    my_current_task = next;
    printk(KERN_NOTICE &amp;quot;&amp;gt;&amp;gt;&amp;gt;switch %d to %d&amp;lt;&amp;lt;&amp;lt;\n&amp;quot;,prev-&amp;gt;pid,next-&amp;gt;pid);
    /* switch to next process */
    asm volatile(
            &amp;quot;pushl %%ebp\n\t&amp;quot; /* save ebp */
            &amp;quot;movl %%esp,%0\n\t&amp;quot; /* save esp */
            &amp;quot;movl %2,%%esp\n\t&amp;quot; /* restore  esp */
            &amp;quot;movl $1f,%1\n\t&amp;quot; /* save eip */
            &amp;quot;pushl %3\n\t&amp;quot;
            &amp;quot;ret\n\t&amp;quot; /* restore  eip */
            &amp;quot;1:\t&amp;quot; /* next process start here */
            &amp;quot;popl %%ebp\n\t&amp;quot;
            : &amp;quot;=m&amp;quot; (prev-&amp;gt;thread.sp),&amp;quot;=m&amp;quot; (prev-&amp;gt;thread.ip)
            : &amp;quot;m&amp;quot; (next-&amp;gt;thread.sp),&amp;quot;m&amp;quot; (next-&amp;gt;thread.ip)
    );
} else {
    next-&amp;gt;state = 0;
    my_current_task = next;
    printk(KERN_NOTICE &amp;quot;&amp;gt;&amp;gt;&amp;gt;switch %d to %d&amp;lt;&amp;lt;&amp;lt;\n&amp;quot;,prev-&amp;gt;pid,next-&amp;gt;pid);
    /* switch to new process */
    asm volatile(
            &amp;quot;pushl %%ebp\n\t&amp;quot; /* save ebp */
            &amp;quot;movl %%esp,%0\n\t&amp;quot; /* save esp */
            &amp;quot;movl %2,%%esp\n\t&amp;quot; /* restore  esp */
            &amp;quot;movl %2,%%ebp\n\t&amp;quot; /* restore  ebp */
            &amp;quot;movl $1f,%1\n\t&amp;quot; /* save eip */
            &amp;quot;pushl %3\n\t&amp;quot;
            &amp;quot;ret\n\t&amp;quot; /* restore  eip */
            : &amp;quot;=m&amp;quot; (prev-&amp;gt;thread.sp),&amp;quot;=m&amp;quot; (prev-&amp;gt;thread.ip)
            : &amp;quot;m&amp;quot; (next-&amp;gt;thread.sp),&amp;quot;m&amp;quot; (next-&amp;gt;thread.ip)
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;自定义进程切换代码简析&lt;/h3&gt;

&lt;p&gt;计算机硬件三大法宝，存储程序计算机，函数调用堆栈，中断
操作系统的“两把剑”：中断上下文和进程上下文切换&lt;/p&gt;

&lt;p&gt;这里进程切换主要是保存当前进程的运行栈和准备好下一个进程的运行栈。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;若下一个进程是可运行的,即状态码是0
先保存当前进程的运行栈，把当前进程的栈底ebp压入到该进程自己的堆栈，再将栈顶指针esp用该进程的sp指针保存，接着把下一个进程的sp指针恢复到保存栈顶的寄存器esp中去，保存当前进程运行的下一条指令的地址到该进程的ip指针中去，其中$1f是指接下来的标号1：的位置，接着再恢复下一个进程的ip指针到eip寄存器中去，由于eip寄存器不能被直接修改，只能通过ret，call等指令间接修改，于是便通过&lt;code&gt;&amp;quot;pushl %3\n\t&amp;quot; &amp;quot;ret\n\t&amp;quot;&lt;/code&gt;两条指令间接修改，ret相当于&lt;code&gt;popl %eip*&lt;/code&gt;,最后一条语句是当前进程下次再获得cpu运行时的第一条语句，也是下一进程需要运行的指令，用来恢复之前被压入各个进程自己的栈的ebp，这里巧妙地共用了这条指令。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若下一个进程不是可运行的,即状态码不是0
同样先保存当前进程的运行栈，把当前进程的栈底ebp压入到该进程自己的堆栈，再将栈顶指针esp用该进程的sp指针保存，接着把下一个进程的sp指针恢复到保存栈顶的寄存器esp中去，由于下一个进程是不可运行的，所以下一个进程的原先栈里什么也没有，是空栈，所以esp和ebp相等，接着保存当前进程运行的下一条指令的地址到该进程的ip指针中去，同样是用两条语句恢复下一个进程的ip指针到eip寄存器中去。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wdk 原创作品转载请注明出处&lt;br&gt;
相关链接 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot;&gt;《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 10:45:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/linux/2016/03/06/linux-kernel-working-process-of-operating-system.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/linux/2016/03/06/linux-kernel-working-process-of-operating-system.html</guid>
        
        <category>linux</category>
        
        <category>linux-kernel</category>
        
        <category>experiment</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>C Inline Assembly Language</title>
        <description>&lt;h2&gt;C语言内嵌汇编语法&lt;/h2&gt;

&lt;h3&gt;GCC&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt; &lt;span class=&quot;n&quot;&gt;__asm__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;汇编语句模版：&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;输出部分：&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;输入部分：&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;破坏描述部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即格式为&lt;code&gt;asm(&amp;quot;statements&amp;quot;:output_regs:input_regs:clobbered_regs);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__asm__&lt;/code&gt;表示后面的代码为内嵌汇编，同时&lt;code&gt;__asm__&lt;/code&gt;也可由&lt;code&gt;asm&lt;/code&gt;来代替，&lt;code&gt;asm&lt;/code&gt;是&lt;code&gt;__asm__&lt;/code&gt;的别名。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;__asm__&lt;/code&gt;后面有时也会加上&lt;code&gt;__volatile__&lt;/code&gt;表示编译器不要优化代码，后面的指令保留原样，同样&lt;code&gt;volatile&lt;/code&gt;是它的别名，在这里值得注意的是无论&lt;code&gt;__asm__&lt;/code&gt;还是&amp;quot;&lt;code&gt;__volatile__&lt;/code&gt;&amp;quot;中的每个下划线都不是一个单独的下划线，而是两个短的下划线拼成的。再后面括号里面的便是汇编指令。&lt;/p&gt;

&lt;h3&gt;Visual C++&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;__asm 汇编指令 [ ; ]
__asm { 汇编指令 } [ ; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样asm前面是两条下划线，后面的方括号内容表示分号可有可无。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;组成一块地用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;__asm {
   mov al, 2
   mov dx, 0xD007
   out dx, al
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分条的使用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;__asm mov al, 2
__asm mov dx, 0xD007
__asm out dx, al
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以写在同一行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;__asm mov al, 2   __asm mov dx, 0xD007   __asm out dx, al
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Turbo C&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用预处理程序的伪指令#asm和#endasm,#asm用来开始一个汇编程序块，而#endasm指令用于该块的结
束。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mul(a,b)
int a,b;
{
   #asm
       mov ax,word ptr 8[bp]
       imul ax word ptr 10[bp]
   #endasm
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用asm语句
格式：asm&amp;lt;汇编语句&amp;gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mul(a,b)
int a,b;
{
    asm   mov ax,word ptr 8[bp]
    asm   imul ax word ptr 10[bp]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Visual C++ 和 Turbo C语法转自&lt;a href=&quot;http://bbs.51cto.com/thread-652061-1.html&quot;&gt;http://bbs.51cto.com/thread-652061-1.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 08:45:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/gramar/2016/03/06/c-inline-assembly-language.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/gramar/2016/03/06/c-inline-assembly-language.html</guid>
        
        <category>gramar</category>
        
        <category>c</category>
        
        
        <category>gramar</category>
        
      </item>
    
      <item>
        <title>Linux Kernel-Working Process Of Assembly Code</title>
        <description>&lt;h2&gt;重点知识总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CS(code segment register)是代码段寄存器,CPU在实际取指令时根据cs:eip来准确定位一个指令。&lt;/li&gt;
&lt;li&gt;b，w，l，p，分别指8位，16位，32位，64位，如movl指移动32位的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AT&amp;amp;T&lt;/strong&gt;汇编格式与&lt;strong&gt;Intel&lt;/strong&gt;汇编格式略有不同，Linux使用的是&lt;strong&gt;AT&amp;amp;T&lt;/strong&gt;汇编格式。&lt;/li&gt;
&lt;li&gt;eip寄存器不能被直接修改，只能通过特殊指令间接修改，如通过call与ret指令。&lt;/li&gt;
&lt;li&gt;函数的返回值默认使用eax寄存器存储返回给上一级函数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;汇编中对应的方法过程如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span class=&quot;nl&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enter&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Real Code Here&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指令实际做的事情列表：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;addl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12345&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pushl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$0x12345&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;popl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pushl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;popl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;实验分析&lt;/h3&gt;

&lt;p&gt;C程序源代码如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-02-25-linux-kernel-working-process-of-assembly-code/main-c.png&quot; alt=&quot;main.c&quot;&gt;
汇编源代码如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/mark/assets/images/2016-02-25-linux-kernel-working-process-of-assembly-code/main-s.png&quot; alt=&quot;main.s&quot;&gt;
从图中可以看出，C程序方法对应的汇编方法一般过程如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span class=&quot;nl&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enter&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Real Code Here&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若方法中不再调用另一方法也即汇编代码中不调用call语句，那么&lt;code&gt;leave&lt;/code&gt;语句可优化为&lt;code&gt;popl %ebp&lt;/code&gt;
参数传递通过堆栈完成，一个参数，则通过&lt;code&gt;8(%ebp)&lt;/code&gt;取参数，两个参数则通过&lt;code&gt;12(%ebp)&lt;/code&gt;, &lt;code&gt;8(*ebp)&lt;/code&gt;分别取出第一和第二个参数。&lt;/p&gt;

&lt;p&gt;wdk 原创作品转载请注明出处&lt;br&gt;
相关链接 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot;&gt;《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 10:42:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/linux/2016/02/25/linux-kernel-working-process-of-assembly-code.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/linux/2016/02/25/linux-kernel-working-process-of-assembly-code.html</guid>
        
        <category>linux</category>
        
        <category>linux-kernel</category>
        
        <category>experiment</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Web Note - Well Use Of Exception</title>
        <description>&lt;h2&gt;用好异常&lt;/h2&gt;

&lt;p&gt;获取调用方法信息的方式：&lt;/p&gt;

&lt;p&gt;方法一. 利用方法的返回值。&lt;br&gt;
方法二. 利用调用方法时传递给方法的参数。&lt;br&gt;
方法三. 利用异常。&lt;/p&gt;

&lt;p&gt;实际项目中一般用到方法一和方法三就足够了，正面的业务逻辑通过方法的返回值来进行参数的传递，如登陆时帐号和密码均正确的情况，反面的业务逻辑，或数据格式检查的业务逻辑通过异常来传递信息。&lt;/p&gt;

&lt;p&gt;方法三实际代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IllegalParamterException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;illegalParamterException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNullOrEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;illegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addIllegalFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;name is required&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNullOrEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;illegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addIllegalFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;password is required&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;illegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasIllegalField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;illegalParamterException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServiceException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name or password wrong&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/showmybook&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IllegalParamterException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;illegalFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIllegalFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ILLEGAL_FIELDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;illegalFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGIN_PAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIP_MESSAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGIN_PAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 12 Jan 2016 17:10:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/j2ee/2016/01/12/web-note-well-use-of-exception.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/j2ee/2016/01/12/web-note-well-use-of-exception.html</guid>
        
        <category>j2ee</category>
        
        <category>web-note</category>
        
        <category>exception</category>
        
        
        <category>j2ee</category>
        
      </item>
    
      <item>
        <title>Web Note - Environment Build</title>
        <description>&lt;h2&gt;Java Web 环境介绍&lt;/h2&gt;

&lt;h3&gt;1. 环境搭建&lt;/h3&gt;

&lt;h4&gt;准备工具&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;JDK (windows 下配置JDK&lt;em&gt;HOME或JAVA&lt;/em&gt;HOME或JRE_HOME)&lt;/li&gt;
&lt;li&gt;Tomcat (windows 下配置 CATALINA_HOME)&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;tips&lt;/strong&gt;：有一软件xampp集成了常用软件如Tomcat和MySQL等，可以尝试替换看看。&lt;/p&gt;

&lt;h4&gt;配置环境&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;若想在命令行下直接使用上述软件的命令，需要在环境变量下配置命令路径（过程略）。&lt;/li&gt;
&lt;li&gt;Eclipse环境配置

&lt;ol&gt;
&lt;li&gt;Eclipse-&amp;gt;Window-&amp;gt;Preferences-&amp;gt;Java-&amp;gt;Installed JREs 将jre路径改为刚才安装的jdk路径，这样便可以查看java源代码。&lt;/li&gt;
&lt;li&gt;Eclipse-&amp;gt;Window-&amp;gt;Preferences-&amp;gt;Server—&amp;gt;Runtime Environments 添加刚刚安装的Tomcat作为Server。&lt;/li&gt;
&lt;li&gt;code style的配置如编码（建议utf8），换行符的设置（建议类Unix），制表符的宽度（建议4），显示空白符，显示行号，用空格替换制表符等，自己根据实际style来配置。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2. Eclipse技巧&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;查看Tomcat运行时目录：在任意代码编写的界面 右键-&amp;gt;Run As-&amp;gt;Run Configurations-&amp;gt;Apache Tomcat-&amp;gt;Arguments-&amp;gt;VM Arguments 里可查看Dwtp.deploy变量的值即为Tomcat运行时deploy目录。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 12 Jan 2016 17:10:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/j2ee/2016/01/12/web-note-environment-building.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/j2ee/2016/01/12/web-note-environment-building.html</guid>
        
        <category>j2ee</category>
        
        <category>web-note， web-environment</category>
        
        
        <category>j2ee</category>
        
      </item>
    
      <item>
        <title>Design Pattern - Factory Method</title>
        <description>&lt;h2&gt;工厂方法模式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;适用范围&lt;/strong&gt;：当一个对象的创建和初始化工作比较复杂或者一个对象会被反复创建时，采用工厂方法模式是一个很好的选择。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工厂方法模式的思想是每个产品的创建都有一个具体的工厂类来实现，由此可能会想到为什么不在产品类里面提供一个创建自己的方法，这是由于不同的使用者可能创建时需要的参数不同，这时用工厂方法模式就可以直接再新建（符合开闭原则，只增加不修改）一些工厂来区分不同的参数，而由产品类自己创建就势必要提供很多创建方法，不符合开闭原则。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工厂方法模式的实现方式  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commonMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductOne&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// empty&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductTwo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//empty&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductOneCreator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductOne&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ProductOne&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Initial productOne here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductTwoCreator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductTwo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ProductTwo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Initial productTwo here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductOneCreator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductTwoCreator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;productOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commonMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;productTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commonMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;窃以为实现工厂方法模式时如需要则可以把工厂做成单例，或工厂中产生对象的方法做成静态方法，当然静态方法可能是不妥的，待以后想到再来修改此处。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与工厂方法模式类似的还有一种叫做简单工厂的模式，这种模式通过一个工厂类来根据传入的参数来选择生成不同的产品对象，所有的产品都继承一个公共的产品抽象类，这种模式的缺点是当生产的产品过多时，将导致工厂类较复杂，不利于后期维护，这种模式不属于经典的二十三种模式之一。工厂方法模式就是把简单工厂的一个大工厂创建所有的类的形式拆分成许多小工厂，并抽象出一个抽象工厂类，这个抽象工厂类只负责定义创建的方式，具体创建的内容有继承它的小工厂类来实现。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 19:50:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/design-pattern/2016/01/07/design-model-factory-method.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/design-pattern/2016/01/07/design-model-factory-method.html</guid>
        
        <category>design-pattern</category>
        
        <category>factory-method</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
      <item>
        <title>Design Pattern - Singleton</title>
        <description>&lt;h2&gt;单例模式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;适用范围&lt;/strong&gt;：当一个类只需要一个实例时，可以考虑采用单例模式，但并不是所有的类都适合做成单例，如果一个类含有数据（也即是有状态的类），那么将该类做成单例时可能会引发线程安全问题（多个线程同时对数据操作），此时的解决之道是要么将该数据做成只读（创建时写入数据），要么不做成单例，做成单例的类要尽量保证是无状态的。&lt;/li&gt;
&lt;li&gt;单例模式可以分为&lt;strong&gt;强制型单例&lt;/strong&gt;和&lt;strong&gt;非强制型单例&lt;/strong&gt;（也有人叫管理上的单例），这两种单例是我自己命名的，前一种单例是让coder代码上不能轻易（Java中可以通过反射机制创建对象）创建对象，只能使用单例模式提供的获取对象的方法，非强制性单例代码上不对coder做强制性限制，要求自觉。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多线程安全强制型单例模式的实现方式&lt;br&gt;
饿汉式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 饿汉式&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// empty&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;双检测锁机制的单例模式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 双检测锁机制的单例模式&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// empty&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一种懒汉式的实现方法，不过不满足多线程安全，只能在单线程下使用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多线程安全非强制性单例模式的实现方式&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// empty&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// empty&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单例模式还有范围的概念，即在某一范围内才是单例，范围扩大了可能就不是单例了，常见的单例范围有application级别，session级别，request/response级别。&lt;br&gt;
&lt;strong&gt;小技巧&lt;/strong&gt;：可以利用thread的thread号为关键字存入HashMap来实现thread级别的单例。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 05 Jan 2016 19:50:00 +0000</pubDate>
        <link>http://www.dosrc.com/mark/design-pattern/2016/01/05/design-model-singleton.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/design-pattern/2016/01/05/design-model-singleton.html</guid>
        
        <category>design-pattern</category>
        
        <category>singleton</category>
        
        
        <category>design-pattern</category>
        
      </item>
    
  </channel>
</rss>
