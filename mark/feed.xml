<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description></description>
    <link>http://www.dosrc.com/mark/</link>
    <atom:link href="http://www.dosrc.com/mark/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 30 Jun 2015 12:52:45 +0800</pubDate>
    <lastBuildDate>Tue, 30 Jun 2015 12:52:45 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Java 连接 MySQL</title>
        <description>&lt;ol&gt;
  &lt;li&gt;下载对应Java的MySQL驱动包，在&lt;a href=&quot;http://dev.mysql.com/downloads/connector/&quot; target=&quot;_blank&quot;&gt;官方下载地址&lt;/a&gt;页面上选择Java对应的 Connector/J。进入下载页面，选择Platform为Platform Independent，下载压缩包，压缩包下的mysql-connector-java-XXX.jar即为我们需要的jar包。&lt;/li&gt;
  &lt;li&gt;添加jar包&lt;/li&gt;
  &lt;li&gt;完整代码如下&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TestConnectMySQL {

    /**
     * Database URL        ---&amp;gt; &quot;localhost&quot;
     * Port                ---&amp;gt; &quot;3306&quot;
     * Schema(database)    ---&amp;gt; &quot;test&quot;
     * User                ---&amp;gt; &quot;root&quot; 
     * Password            ---&amp;gt; &quot;&quot;
     *                     
     * @param sql
     */
    public static void querySQL(String sql) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            // Load driver
            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);

            // Connect and get connection
            String url = &quot;jdbc:mysql://localhost:3306/test&quot;;
            connection = DriverManager.getConnection(url, &quot;root&quot;, &quot;&quot;);

            // Prepare for the compiled sql statement
            preparedStatement = connection.prepareCall(sql);
            // preparedStatement.setString(1, &quot;paramter&quot;);

            // Execute and get the resultSet
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                // int id = resultSet.getInt(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    public static void main(String[] args) {
        String sql = &quot;SELECT * FROM &#39;user&#39;&quot;;
        TestConnectMySQL.querySQL(sql);
    }
}

&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Tue, 09 Jun 2015 05:16:00 +0800</pubDate>
        <link>http://www.dosrc.com/mark/j2ee/2015/06/09/java-connect-mysql.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/j2ee/2015/06/09/java-connect-mysql.html</guid>
        
        
        <category>j2ee</category>
        
      </item>
    
      <item>
        <title>Android 自定义 AsyncLoader loadInBackground  不被调用</title>
        <description>&lt;p&gt;这是因为Android内部的运行方法中并不会主动调用loadInBackground()方法，所以需要手动调用forceLoad()方法，forceLoad()方法中会去调用loadInBackground()方法。&lt;/p&gt;

&lt;p&gt;所以正确的实现应该是应该重载AsyncLoader中的onStartLoading()方法,并调用forceLoad()方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
protected void onStartLoading() {
    forceLoad();
    super.onStartLoading();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import android.content.AsyncTaskLoader;
import android.content.Context;

public class MyLoader extends AsyncTaskLoader&amp;lt;String&amp;gt; {

    public MyLoader(Context context) {
        super(context);
    }

    @Override
    public String loadInBackground() {
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return new String(&quot;data&quot;);
    }

    @Override
    protected void onStartLoading() {
        forceLoad();
        super.onStartLoading();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import android.app.Activity;
import android.app.LoaderManager.LoaderCallbacks;
import android.content.Loader;
import android.os.Bundle;
import android.util.Log;

public class MainActivity extends Activity implements LoaderCallbacks&amp;lt;String&amp;gt; {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getLoaderManager().initLoader(0, null, this);
    }

    @Override
    public Loader&amp;lt;String&amp;gt; onCreateLoader(int id, Bundle args) {
        return new MyLoader(this);
    }

    @Override
    public void onLoadFinished(Loader&amp;lt;String&amp;gt; loader, String data) {
        Log.d(&quot;MainActivity&quot;, data);
    }

    @Override
    public void onLoaderReset(Loader&amp;lt;String&amp;gt; loader) {
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 05:16:00 +0800</pubDate>
        <link>http://www.dosrc.com/mark/android/2015/06/09/android-loader-issue.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/android/2015/06/09/android-loader-issue.html</guid>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Html拖放事件</title>
        <description>&lt;p&gt;为了使得元素能够被拖放首先要设置被拖动元素的 draggable=”true”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;被拖动对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;被拖动对象会触发三个事件如下，分别触发三个事件所指定的回调函数&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ondragstart——–&amp;gt;开始拖动时被触发&lt;/li&gt;
  &lt;li&gt;drag—————&amp;gt;拖动过程中一直被触发&lt;/li&gt;
  &lt;li&gt;ondragend———-&amp;gt;松开拖动鼠标后被触发&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;目标对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目标对象即被拖动对象所拖动到的对象，会触发如下事件&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;dragenter———-&amp;gt;被拖动对象进入目标对象后被触发&lt;/li&gt;
  &lt;li&gt;dragover———–&amp;gt;被拖动对象在目标对象上时一直被触发&lt;/li&gt;
  &lt;li&gt;dragleave或drop—-&amp;gt;dragleave事件在被拖动对象离开目标对象后被触发，drop事件在被拖动对象拖动到目标对象上松开鼠标后被触发，drop事件和dragleave事件为互斥事件，不能同时发生。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/tiy/t.asp?f=html5_draganddrop&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Jun 2015 01:17:00 +0800</pubDate>
        <link>http://www.dosrc.com/mark/html5/2015/06/05/html5-drag-event.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/html5/2015/06/05/html5-drag-event.html</guid>
        
        
        <category>html5</category>
        
      </item>
    
      <item>
        <title>程序员感悟</title>
        <description>&lt;ul&gt;
  &lt;li&gt;工作态度:&lt;br /&gt;
I don’t want to call myself as a programmer, in my opinion， I am a artist. 我们属于艺术界，不属于制造业，at least 我是这么认为的.&lt;br /&gt;
我们所从事的行业是非常细致入微的，是不容马虎的，连自己这关都过不去的的代码还是趁早丢进垃圾桶把。&lt;/li&gt;
  &lt;li&gt;方法论:
    &lt;ul&gt;
      &lt;li&gt;观点一：&lt;br /&gt;
物理与数学的关系-物理这门学科是从理论的角度解释物体的实践的一门学科，数学是从抽象的角度提取出物理发现的的规律，数学具有高于物理的抽象性，以及适应广度，数学之所以这么重要是由于人类是生活在大自然中的，我们的智慧也来源于我们所生活的环境，因为我们在向大自然学习模仿，所以作为对大自然物理现象高度概括的数学就好比一部武功心法了。&lt;br /&gt;
作为程序员fundation的重要性不言而喻，会几门语言，懂点coding并不等于把fundation学好了，学习编程很容易急功近利，追求新框架，追捧新语言，从而容易迷失在无限的追逐游戏中，而忽略了最为重要的fundation。&lt;/li&gt;
      &lt;li&gt;观点二：&lt;br /&gt;
程序员要多实践，实践方能出真知，我们要坚持终生学习，问渠那得清如许，为有源头活水来，不学习新知识，就会被时代所淘汰。&lt;/li&gt;
      &lt;li&gt;观点三：&lt;br /&gt;
观点一是理论，观点二是实践，理论和实践是辩证统一的关系，二者缺一不可，实践与理论相辅相成。&lt;br /&gt;
上述三个观点就仁者见仁智者见智了吧。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使命：&lt;br /&gt;
集体荣誉感往大了说就是民族责任感&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;年轻人应该有宏伟的志向，用别人的产品做自己的东西，你永远只是个“高级客户”，成不了真正的开发者。不管你用他国的系统软件开发出多少好的产品，挣了多少钱，只要人家一升级、或一推出新产品，你口袋里的银子连同最后一条小裤衩也会被剥夺的一干二净。你，只不过是一个高级打工仔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文中的观点切勿全盘接受，全盘相信，因为就连笔者本人也不能保证观点的正确。之所以写这些，是因为想引起思考，也仅仅是这一个目的罢了。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 18:13:48 +0800</pubDate>
        <link>http://www.dosrc.com/mark/essay/2015/06/01/programmer-sentiment.html</link>
        <guid isPermaLink="true">http://www.dosrc.com/mark/essay/2015/06/01/programmer-sentiment.html</guid>
        
        
        <category>essay</category>
        
      </item>
    
  </channel>
</rss>
